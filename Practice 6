-- EX 1:
WITH CTE AS
(SELECT  company_id, title, description, count(job_id) AS job_count
FROM job_listings
GROUP BY company_id, title, description)

SELECT COUNT(*) AS duplicate_companies
FROM CTE
WHERE job_count > 1 ; 

-- EX 2:  
SELECT category, product, SUM(spend) AS total_spend
FROM product_spend
WHERE EXTRACT(YEAR FROM transaction_date) = '2022' 
GROUP BY category, product
ORDER BY category, total_spend DESC;

DAP AN:
WITH CTE1 AS (
SELECT category, product, SUM(spend) AS total_spend
FROM product_spend
WHERE EXTRACT(YEAR FROM transaction_date) = '2022' AND category = 'appliance'
GROUP BY category, product
ORDER BY category, total_spend DESC
LIMIT 2
),

CTE2 AS ( 
SELECT category, product, SUM(spend) AS total_spend
FROM product_spend
WHERE EXTRACT(YEAR FROM transaction_date) = '2022' AND category = 'electronics'
GROUP BY category, product
ORDER BY category, total_spend DESC
LIMIT 2
)

SELECT * FROM CTE1
UNION ALL
SELECT * FROM CTE2

-- EX 3:
SELECT COUNT(DISTINCT policy_holder_id) AS member_count
FROM callers
GROUP BY policy_holder_id
HAVING COUNT(case_id) > 2;

-- EX 4: 
SELECT A.page_id
FROM pages AS A  
LEFT JOIN page_likes AS B  
ON A.page_id = B.page_id
WHERE B.liked_date IS NULL
ORDER BY A.page_id;

-- EX 5: 
WITH 
THIS_MONTH AS (
SELECT *
FROM user_actions
WHERE TO_CHAR(event_date, 'MM') = ('07') AND TO_CHAR(event_date, 'YYYY') = ('2022')
),

LAST_MONTH AS (
SELECT *
FROM user_actions
WHERE TO_CHAR(event_date, 'MM') = ('06') AND TO_CHAR(event_date, 'YYYY') = ('2022')
)

SELECT NEW.MONTH, COUNT(*) AS monthly_active_users
FROM (
SELECT EXTRACT(MONTH FROM A.event_date) AS MONTH, A.user_id AS NEW_USER_ID
FROM THIS_MONTH AS A  
JOIN LAST_MONTH AS B ON A.user_id = B.user_id
GROUP BY EXTRACT(MONTH FROM A.event_date), A.user_id 
) AS NEW
GROUP BY NEW.MONTH

-- EX 6:
WITH 
CTE_TRANS AS ( 
SELECT DATE_FORMAT(trans_date,"%Y-%m") as month, country, COUNT(*) AS trans_count, SUM(amount) AS trans_total_amount 
FROM Transactions 
GROUP BY month, country
 ),

CTE_APP AS ( 
SELECT DATE_FORMAT(trans_date,"%Y-%m") as month, country, 
SUM(CASE 
    WHEN state = 'approved' THEN 1
    ELSE 0
END) AS approved_count,
SUM(CASE 
    WHEN state = 'approved' THEN amount
    ELSE 0
END) AS approved_total_amount
FROM Transactions 
GROUP BY month, country
 )

SELECT A.month, A.country, A.trans_count, B.approved_count, A.trans_total_amount, B.approved_total_amount
FROM CTE_TRANS AS A 
LEFT JOIN CTE_APP AS B ON A.month = B.month
GROUP BY A.month, A.country

-- EX 7:
WITH CTE AS (
SELECT product_id, MIN(year) AS year
FROM SALES
GROUP BY product_id
)

SELECT B.product_id, B.year AS first_year, A.quantity, A.price
FROM SALES AS A
JOIN CTE AS B ON A.product_id = B.product_id AND A.year = B.year

-- EX 8:
SELECT A.customer_id
FROM CUSTOMER AS A
GROUP BY A.customer_id 
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM PRODUCT)

-- EX 9:
SELECT employee_id 
FROM EMPLOYEES
WHERE salary < 30000 AND manager_id NOT IN (SELECT employee_id FROM EMPLOYEES)
ORDER BY employee_id

-- EX 10 (OLD):
WITH CTE AS
(SELECT  company_id, title, description, count(job_id) AS job_count
FROM job_listings
GROUP BY company_id, title, description)

SELECT COUNT(*) AS duplicate_companies
FROM CTE
WHERE job_count > 1 ; 


-- EX 11:
SELECT NEW_TABLE1.NAME AS RESULTS FROM (
SELECT A.USER_ID, COUNT(A.RATING) AS COUNT, B.NAME 
FROM MOVIERATING AS A
JOIN USERS AS B ON B.USER_ID = A.USER_ID
GROUP BY USER_ID
ORDER BY COUNT DESC, B.NAME
LIMIT 1) AS NEW_TABLE1

UNION

SELECT NEW_TABLE.TITLE FROM (
SELECT A.movie_id, AVG(A.rating) AS AVG, C.TITLE
FROM MovieRating AS A
JOIN MOVIES AS C ON C.movie_id = A.movie_id 
WHERE DATE_FORMAT(A.created_at, '%Y-%m') = '2020-02'
GROUP BY movie_id
ORDER BY AVG DESC, TITLE
LIMIT 1) AS NEW_TABLE




