--- SUBQUERIES - WHERE
-- Tìm những hóa đơn có số tiền lớn hơn số tiền trung bình các hóa đơn

SELECT AVG(AMOUNT) FROM PAYMENT;

SELECT 
*
FROM PAYMENT
WHERE AMOUNT > ( SELECT AVG(AMOUNT) FROM PAYMENT );

-- Tìm những hóa đơn của khách hàng có tên là Adam
/* Thay vi: 
SELECT * FROM CUSTOMER
WHERE FIRST_NAME LIKE 'ADAM';

SELECT * 
FROM PAYMENT AS A 
JOIN CUSTOMER AS B ON A.CUSTOMER_ID = B.CUSTOMER_ID
WHERE B.FIRST_NAME LIKE 'ADAM';
*/

SELECT CUSTOMER_ID FROM CUSTOMER
WHERE FIRST_NAME LIKE 'ADAM';

-- DAP AN:
SELECT * FROM PAYMENT
WHERE CUSTOMER_ID = (SELECT CUSTOMER_ID FROM CUSTOMER WHERE FIRST_NAME LIKE 'ADAM');

SELECT * FROM PAYMENT
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID FROM CUSTOMER);

-- CL 1: Tìm những phim có thời lượng lớn hơn trung bình các phim
-- SELECT AVG(LENGTH) FROM FILM;

SELECT FILM_ID, TITLE, LENGTH FROM FILM
WHERE LENGTH > (SELECT AVG(LENGTH) FROM FILM);

-- CL 2: Tìm những film có ở Store 2 ít nhất 3 lần

SELECT FILM_ID, TITLE FROM FILM
WHERE FILM_ID IN (SELECT FILM_ID FROM INVENTORY
WHERE STORE_ID = 2 
GROUP BY FILM_ID
HAVING COUNT(*) >=3);

-- CL 3: Tìm những KH đến từ California và chi nhiều hơn 100

SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL FROM CUSTOMER
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID FROM PAYMENT
						GROUP BY CUSTOMER_ID
						HAVING SUM(AMOUNT) > 100);

--- SUBQUERIES - FROM
-- Tìm những khách hàng có hơn 30 hóa đơn

SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME FROM CUSTOMER
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID, COUNT(PAYMENT_ID) AS COUNT FROM PAYMENT
						GROUP BY CUSTOMER_ID
						HAVING COUNT(PAYMENT_ID) > 30);

SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, NEW_TABLE.SO_LUONG FROM 
(SELECT CUSTOMER_ID, COUNT(PAYMENT_ID) AS SO_LUONG 
FROM PAYMENT
GROUP BY CUSTOMER_ID) AS NEW_TABLE
JOIN CUSTOMER ON NEW_TABLE.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID
WHERE SO_LUONG > 30;

--- SUBQUERIES - SELECT

SELECT *, 
(SELECT AVG(AMOUNT) FROM PAYMENT),
(SELECT AVG(AMOUNT) FROM PAYMENT) - AMOUNT AS GAP
FROM PAYMENT;

-- CL 1: 
SELECT PAYMENT_ID, AMOUNT, 
(SELECT MAX(AMOUNT) FROM PAYMENT) AS MAX_AMOUNT,
(SELECT MAX(AMOUNT) FROM PAYMENT) - AMOUNT AS DIFF
FROM PAYMENT;

--- CORRELATED SUBQUERIES
-- EX1 (WHERE): Lấy thông tin KH từ bảng Customer, có tổng hóa đơn > $100

/* SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, TABLE1.TONG FROM
(SELECT CUSTOMER_ID, SUM(AMOUNT) AS TONG FROM PAYMENT
GROUP BY CUSTOMER_ID) AS TABLE1
JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = TABLE1.CUSTOMER_ID
WHERE TABLE1.TONG > 100 */


SELECT * 
FROM CUSTOMER AS A
WHERE CUSTOMER_ID = (SELECT CUSTOMER_ID
FROM PAYMENT AS B 
WHERE B.CUSTOMER_ID = A.CUSTOMER_ID 
GROUP BY CUSTOMER_ID
HAVING SUM(AMOUNT) > 100)

-- HOAC:

SELECT * 
FROM CUSTOMER AS A
WHERE EXISTS (SELECT CUSTOMER_ID
FROM PAYMENT AS B 
WHERE B.CUSTOMER_ID = A.CUSTOMER_ID 
GROUP BY CUSTOMER_ID
HAVING SUM(AMOUNT) > 100)

-- EX2 (SELECT): MA_KH, TEN_KH, PAYMENT_ID, MAX(AMOUNT) CUA TUNG KH

SELECT A.CUSTOMER_ID, A.FIRST_NAME || A.LAST_NAME, B.PAYMENT_ID, 
MAX(B.AMOUNT)
FROM CUSTOMER AS A
JOIN PAYMENT AS B
ON A.CUSTOMER_ID = B.CUSTOMER_ID
GROUP BY A.CUSTOMER_ID, A.FIRST_NAME || A.LAST_NAME, B.PAYMENT_ID
ORDER BY CUSTOMER_ID

-- SELECT CUSTOMER_ID, MAX(AMOUNT) FROM PAYMENT GROUP BY CUSTOMER_ID ORDER BY CUSTOMER_ID

SELECT A.CUSTOMER_ID, A.FIRST_NAME || A.LAST_NAME, B.PAYMENT_ID, 
(SELECT MAX(AMOUNT) FROM PAYMENT 
 WHERE CUSTOMER_ID = A.CUSTOMER_ID
 GROUP BY CUSTOMER_ID 
 ORDER BY CUSTOMER_ID )
FROM CUSTOMER AS A
JOIN PAYMENT AS B
ON A.CUSTOMER_ID = B.CUSTOMER_ID
GROUP BY A.CUSTOMER_ID, A.FIRST_NAME || A.LAST_NAME, B.PAYMENT_ID
ORDER BY CUSTOMER_ID

-- CL 1: liệt kê khoản thanh toán với tổng số hóa đơn và tổng tiền mỗi khách hàng trả:

SELECT A.*,
(SELECT SUM(AMOUNT) FROM PAYMENT
			WHERE CUSTOMER_ID = A.CUSTOMER_ID
			GROUP BY CUSTOMER_ID),
(SELECT COUNT(PAYMENT_ID) FROM PAYMENT
			WHERE CUSTOMER_ID = A.CUSTOMER_ID
			GROUP BY CUSTOMER_ID) 
FROM PAYMENT AS A
ORDER BY A.CUSTOMER_ID;

-- CL 2: danh sách các phim có chi phí thay thế lớn nhất trong mỗi loại rating. 
-- film_id, title, rating, replacement_cost, avg_replacement_cost

					SELECT A.FILM_ID, A.TITLE, A.RATING, A.REPLACEMENT_COST,
					(SELECT AVG(REPLACEMENT_COST) 
					 FROM FILM
					 WHERE RATING = A.RATING
					 GROUP BY RATING)
					FROM FILM AS A
					WHERE A.RATING IN (SELECT B.FILM_ID, MAX(B.REPLACEMENT_COST) FROM FILM AS B GROUP BY B.RATING)
					GROUP BY  A.FILM_ID, A.TITLE, A.RATING, A.REPLACEMENT_COST
					ORDER BY A.REPLACEMENT_COST DESC;

SELECT A.FILM_ID, A.TITLE, A.RATING, A.REPLACEMENT_COST,
		(SELECT AVG(REPLACEMENT_COST) 
		 FROM FILM
		 WHERE RATING = A.RATING
		 GROUP BY RATING)
FROM FILM AS A
WHERE REPLACEMENT_COST IN (SELECT MAX(REPLACEMENT_COST) 
									FROM FILM
								  	WHERE RATING = A.RATING
									GROUP BY RATING);

---CTEs:
-- EX 1: tìm khách hàng có hơn 30 hóa đơn
-- mã KH, tên KH, số lượng hóa đơn, tổng số tiền, thời gian thuê trung bình

WITH HIGH_PAYMENT AS
(
SELECT * FROM PAYMENT
WHERE AMOUNT > 11) 
SELECT * FROM HIGH_PAYMENT;

WITH 
TWT_TOTAL_PAYMENT AS
(SELECT CUSTOMER_ID, COUNT(PAYMENT_ID) AS SO_LUONG, SUM(AMOUNT) AS TONG
FROM PAYMENT
GROUP BY CUSTOMER_ID),

TWT_AVG_RENTAL AS
(SELECT CUSTOMER_ID, AVG(RETURN_DATE - RENTAL_DATE) AS RENTAL_TIME
FROM RENTAL
GROUP BY CUSTOMER_ID)

SELECT A.CUSTOMER_ID, A.FIRST_NAME, B.SO_LUONG, B.TONG, C.RENTAL_TIME
FROM CUSTOMER AS A 
JOIN TWT_TOTAL_PAYMENT AS B ON A.CUSTOMER_ID = B.CUSTOMER_ID
JOIN TWT_AVG_RENTAL AS C ON A.CUSTOMER_ID = C.CUSTOMER_ID
WHERE SO_LUONG > 30;


--  EX 2: tìm hóa đơn có số tiền cao hơn số tiền TB của khách hàng chi tiêu trên mỗi hóa đơn
-- mã KH, tên KH, số lượng hóa đơn, số tiền, số tiền trung bình của khách hàng.


WITH 
TWT_SO_LUONG AS
(SELECT CUSTOMER_ID, COUNT(PAYMENT_ID) AS SO_LUONG, SUM(AMOUNT) AS TONG
 FROM PAYMENT
 GROUP BY CUSTOMER_ID),

TWT_AVG_AMOUNT AS 
(SELECT CUSTOMER_ID, AVG(AMOUNT) AS AVG_AMOUNT 
 FROM PAYMENT 
 GROUP BY CUSTOMER_ID )

SELECT A.CUSTOMER_ID, A.FIRST_NAME, B.SO_LUONG, B.TONG, C.AVG_AMOUNT, D.AMOUNT
FROM CUSTOMER AS A 
JOIN TWT_SO_LUONG AS B ON A.CUSTOMER_ID = B.CUSTOMER_ID
JOIN TWT_AVG_AMOUNT AS C ON A.CUSTOMER_ID = C.CUSTOMER_ID 
JOIN PAYMENT AS D ON A.CUSTOMER_ID = D.CUSTOMER_ID 
WHERE D.AMOUNT > C.AVG_AMOUNT;

