-- WINDOW FUNCTION - TỔNG HỢP
--- OVER () WITH PARTITION BY ...
/* tính tỉ lệ số tiền thanh toán từng ngày với tổng số tiền đã thanh toán của mỗi KH
Mã KH, tên KH, ngày thanh toán, số tiền thanh toán tại ngày, tổng tiền đã thanh toán, tỉ lệ */

-- CÁCH 1:
SELECT A.CUSTOMER_ID, B.FIRST_NAME, A.PAYMENT_DATE, A.AMOUNT,
(SELECT SUM(AMOUNT)
 FROM PAYMENT
 WHERE CUSTOMER_ID = A.CUSTOMER_ID
 GROUP BY CUSTOMER_ID), 
 A.AMOUNT / (SELECT SUM(AMOUNT)
			FROM PAYMENT
			WHERE CUSTOMER_ID = A.CUSTOMER_ID
			GROUP BY CUSTOMER_ID) AS TI_LE
FROM PAYMENT AS A
JOIN CUSTOMER AS B ON A.CUSTOMER_ID = B.CUSTOMER_ID

-- CÁCH 2:
WITH TOTAL_PAYMENT AS (
SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL
FROM PAYMENT
GROUP BY CUSTOMER_ID
)

SELECT A.CUSTOMER_ID, B.FIRST_NAME, A.PAYMENT_DATE, A.AMOUNT, C.TOTAL
FROM PAYMENT AS A
JOIN CUSTOMER AS B  ON A.CUSTOMER_ID = B.CUSTOMER_ID
JOIN TOTAL_PAYMENT AS C ON C.CUSTOMER_ID = A.CUSTOMER_ID

-- CÁCH 3:

SELECT A.CUSTOMER_ID, B.FIRST_NAME, A.PAYMENT_DATE, A.AMOUNT,
SUM(A.AMOUNT) OVER(PARTITION BY A.CUSTOMER_ID) AS TOTAL,
A.AMOUNT / SUM(A.AMOUNT) OVER(PARTITION BY A.CUSTOMER_ID) AS TI_LE
FROM PAYMENT AS A
JOIN CUSTOMER AS B  ON A.CUSTOMER_ID = B.CUSTOMER_ID

-- CL1:
SELECT  A.FILM_ID, A.TITLE, A.LENGTH, C.NAME AS CATEGORY, 
ROUND(AVG(A.LENGTH) OVER(PARTITION BY C.NAME),2) AS AVG
FROM FILM AS A
JOIN FILM_CATEGORY AS B ON A.FILM_ID = B.FILM_ID
JOIN CATEGORY AS C ON B.CATEGORY_ID = C.CATEGORY_ID
ORDER BY A.FILM_ID;

-- CL2:
SELECT *,
COUNT(*) OVER(PARTITION BY CUSTOMER_ID, AMOUNT) AS SO_LAN
FROM PAYMENT
ORDER BY PAYMENT_ID;


--- OVER () WITH ORDER BY ...: GIỐNG ACCUMULATED
SELECT PAYMENT_DATE, AMOUNT, CUSTOMER_ID,
SUM(AMOUNT) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) AS TOTAL_AMOUNT
FROM PAYMENT;


--- RANK / DENSE_RANK / ROW-NUMBER
SELECT  A.FILM_ID, C.NAME AS CATEGORY, A.LENGTH,
RANK() OVER(PARTITION BY C.NAME ORDER BY A.LENGTH DESC) AS RANK1,
DENSE_RANK() OVER(PARTITION BY C.NAME ORDER BY A.LENGTH DESC) AS RANK2,
ROW_NUMBER() OVER(PARTITION BY C.NAME ORDER BY A.LENGTH DESC, A.FILM_ID) AS RANK3
FROM FILM AS A
JOIN FILM_CATEGORY AS B ON A.FILM_ID = B.FILM_ID
JOIN CATEGORY AS C ON B.CATEGORY_ID = C.CATEGORY_ID

-- CL 1: tên KH, quốc gia, số lượng thanh toán.
-- bảng KH có doanh thu cao nhất cho mỗi quốc gia. lọc 3 KH đầu.
SELECT * FROM (
SELECT  CONCAT(A.FIRST_NAME, ' ', A.LAST_NAME) AS FULL_NAME, E.COUNTRY,
COUNT(*) AS SO_LUONG,
SUM(B.AMOUNT) AS SUM,
RANK() OVER(PARTITION BY E.COUNTRY ORDER BY SUM(B.AMOUNT) DESC) AS STT
FROM CUSTOMER AS A
JOIN PAYMENT AS B ON A.CUSTOMER_ID = B.CUSTOMER_ID
JOIN ADDRESS AS C ON A.ADDRESS_ID = C.ADDRESS_ID
JOIN CITY AS D ON C.CITY_ID = D.CITY_ID
JOIN COUNTRY AS E ON D.COUNTRY_ID = E.COUNTRY_ID
GROUP BY A.CUSTOMER_ID, E.COUNTRY ) AS NEW_TABLE
WHERE NEW_TABLE.STT IN (1,2,3)


--- FIRST_VALUE: số tiền thanh toán cho đơn hàng đầu tiên  và gần nhất theo từng KH

-- CACH 1:
SELECT * FROM (
SELECT PAYMENT_ID, CUSTOMER_ID, PAYMENT_DATE, AMOUNT,
RANK() OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE DESC) AS STT
FROM PAYMENT) AS A
WHERE A.STT = '1'

-- CACH 2: FIRST_VALUE
SELECT PAYMENT_ID, CUSTOMER_ID, PAYMENT_DATE, AMOUNT,
FIRST_VALUE(AMOUNT) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) AS FIRST_AMOUNT,
FIRST_VALUE(AMOUNT) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE DESC) AS LAST_AMOUNT
FROM PAYMENT


--- LEAD(COL,3) OVER(PARTITION BY COL ORDER BY COL)
-- tìm chênh lệch số tiền giữa các lần thanh toán lien tiep của từng KH
SELECT CUSTOMER_ID,  PAYMENT_DATE, AMOUNT,
LEAD(PAYMENT_DATE,3) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) AS NEXT_DATE,
LEAD(AMOUNT,3) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) AS NEXT_AMOUNT,
(AMOUNT - LEAD(AMOUNT,3) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) ) AS GAP
FROM PAYMENT 

--- LAG
SELECT CUSTOMER_ID,  PAYMENT_DATE, AMOUNT,
LEAD(AMOUNT) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) AS NEXT_DATE,
LAG(AMOUNT) OVER(PARTITION BY CUSTOMER_ID ORDER BY PAYMENT_DATE) AS PREVIOUS_DATE
FROM PAYMENT 

-- CL1: bảng trả doanh thu trong ngày, và ngày hôm trước, % tăng trưởng so với ngày hôm trước.

WITH CTE AS (
SELECT DATE(PAYMENT_DATE) AS PAYMENT_DATE, SUM(AMOUNT) AS AMOUNT
FROM PAYMENT
GROUP BY DATE(PAYMENT_DATE)
)

SELECT  PAYMENT_DATE, AMOUNT,
LAG(PAYMENT_DATE) OVER(ORDER BY PAYMENT_DATE) AS PREVIOUS_DATE,
LAG(AMOUNT) OVER(ORDER BY PAYMENT_DATE) AS PREVIOUS_AMOUNT,
ROUND(AMOUNT / LAG(AMOUNT) OVER(ORDER BY PAYMENT_DATE) - 1, 2)*100 AS TI_LE
FROM CTE






